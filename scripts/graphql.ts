import { generateNamespace } from '@gql2ts/from-schema'
import { DEFAULT_OPTIONS, DEFAULT_TYPE_MAP } from '@gql2ts/language-typescript'
import { introspectionQuery, IntrospectionQuery } from 'graphql'
import { writeFile } from 'mz/fs'
import fetch from 'node-fetch'
import * as path from 'path'
import { format, resolveConfig } from 'prettier'
import signale from 'signale'

const GRAPHQL_ENDPOINT = process.env.GRAPHQL_ENDPOINT || 'https://sourcegraph.com/.api/graphql'
const GRAPHQL_TYPES_PATH = path.resolve(__dirname, '..', 'app', 'backend', 'graphqlschema.ts')

async function sendIntrospectionQuery(): Promise<string> {
    signale.await(`Fetching schema from ${GRAPHQL_ENDPOINT}`)
    const response = await fetch(GRAPHQL_ENDPOINT, {
        method: 'POST',
        body: JSON.stringify({ query: introspectionQuery }),
    })
    if (response.status !== 200) {
        throw new Error(`${response.status} ${response.statusText}`)
    }
    return await response.text()
}

async function generateGraphQLTypes(): Promise<void> {
    const responseText = await sendIntrospectionQuery()
    const result = JSON.parse(responseText) as { data: IntrospectionQuery }

    const formatOptions = (await resolveConfig(__dirname, { config: __dirname + '/../prettier.config.js' }))!
    const typings = [
        '// THIS FILE IS AUTOGENERATED, DO NOT EDIT MANUALLY',
        '// to update it from the live GraphQL API, run `npm run graphql`',
        '',
        'export type ID = string',
        '',
        generateNamespace(
            '',
            result,
            {
                typeMap: {
                    ...DEFAULT_TYPE_MAP,
                    ID: 'ID',
                },
            },
            {
                generateNamespace: (name: string, interfaces: string) => interfaces,
                interfaceBuilder: (name: string, body: string) =>
                    'export ' + DEFAULT_OPTIONS.interfaceBuilder(name, body),
                enumTypeBuilder: (name: string, values: string) =>
                    'export ' + DEFAULT_OPTIONS.enumTypeBuilder(name, values),
                typeBuilder: (name: string, body: string) => 'export ' + DEFAULT_OPTIONS.typeBuilder(name, body),
                wrapList: (type: string) => `${type}[]`,
                postProcessor: (code: string) => format(code, { ...formatOptions, parser: 'typescript' }),
            }
        ),
    ].join('\n')
    await writeFile(GRAPHQL_TYPES_PATH, typings)
    signale.success(`Updated ${GRAPHQL_TYPES_PATH}`)
}

generateGraphQLTypes().catch(err => {
    console.error(err)
    process.exitCode = 1
})
